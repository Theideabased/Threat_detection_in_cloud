2024-07-03 11:28:31,381:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:28:31,381:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:28:31,381:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:28:31,381:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:54:49,537:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:54:49,554:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:54:49,554:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 11:54:49,554:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-07-03 12:09:22,707:INFO:PyCaret ClassificationExperiment
2024-07-03 12:09:22,707:INFO:Logging name: clf-default-name
2024-07-03 12:09:22,708:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-07-03 12:09:22,708:INFO:version 3.3.2
2024-07-03 12:09:22,709:INFO:Initializing setup()
2024-07-03 12:09:22,709:INFO:self.USI: 2a89
2024-07-03 12:09:22,709:INFO:self._variable_keys: {'fold_groups_param', 'y', 'gpu_n_jobs_param', 'X_train', 'html_param', 'USI', 'y_train', '_ml_usecase', 'memory', 'log_plots_param', 'target_param', 'exp_id', 'fold_shuffle_param', 'gpu_param', 'X_test', 'exp_name_log', 'data', 'seed', 'pipeline', 'logging_param', 'idx', 'n_jobs_param', 'fix_imbalance', '_available_plots', 'is_multiclass', 'y_test', 'fold_generator', 'X'}
2024-07-03 12:09:22,709:INFO:Checking environment
2024-07-03 12:09:22,717:INFO:python_version: 3.11.9
2024-07-03 12:09:22,718:INFO:python_build: ('tags/v3.11.9:de54cf5', 'Apr  2 2024 10:12:12')
2024-07-03 12:09:22,722:INFO:machine: AMD64
2024-07-03 12:09:22,722:INFO:platform: Windows-10-10.0.22621-SP0
2024-07-03 12:09:22,753:INFO:Memory: svmem(total=7466897408, available=1168179200, percent=84.4, used=6298718208, free=1168179200)
2024-07-03 12:09:22,754:INFO:Physical Core: 4
2024-07-03 12:09:22,754:INFO:Logical Core: 4
2024-07-03 12:09:22,754:INFO:Checking libraries
2024-07-03 12:09:22,755:INFO:System:
2024-07-03 12:09:22,755:INFO:    python: 3.11.9 (tags/v3.11.9:de54cf5, Apr  2 2024, 10:12:12) [MSC v.1938 64 bit (AMD64)]
2024-07-03 12:09:22,755:INFO:executable: c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Scripts\python.exe
2024-07-03 12:09:22,755:INFO:   machine: Windows-10-10.0.22621-SP0
2024-07-03 12:09:22,755:INFO:PyCaret required dependencies:
2024-07-03 12:09:26,185:INFO:                 pip: 24.1.1
2024-07-03 12:09:26,185:INFO:          setuptools: 65.5.0
2024-07-03 12:09:26,185:INFO:             pycaret: 3.3.2
2024-07-03 12:09:26,185:INFO:             IPython: 8.26.0
2024-07-03 12:09:26,185:INFO:          ipywidgets: 8.1.3
2024-07-03 12:09:26,185:INFO:                tqdm: 4.66.4
2024-07-03 12:09:26,185:INFO:               numpy: 1.26.4
2024-07-03 12:09:26,185:INFO:              pandas: 2.1.4
2024-07-03 12:09:26,185:INFO:              jinja2: 3.1.4
2024-07-03 12:09:26,185:INFO:               scipy: 1.11.4
2024-07-03 12:09:26,185:INFO:              joblib: 1.3.2
2024-07-03 12:09:26,185:INFO:             sklearn: 1.4.2
2024-07-03 12:09:26,185:INFO:                pyod: 2.0.1
2024-07-03 12:09:26,185:INFO:            imblearn: 0.12.3
2024-07-03 12:09:26,185:INFO:   category_encoders: 2.6.3
2024-07-03 12:09:26,185:INFO:            lightgbm: 4.4.0
2024-07-03 12:09:26,185:INFO:               numba: 0.60.0
2024-07-03 12:09:26,185:INFO:            requests: 2.32.3
2024-07-03 12:09:26,185:INFO:          matplotlib: 3.7.5
2024-07-03 12:09:26,185:INFO:          scikitplot: 0.3.7
2024-07-03 12:09:26,185:INFO:         yellowbrick: 1.5
2024-07-03 12:09:26,185:INFO:              plotly: 5.22.0
2024-07-03 12:09:26,185:INFO:    plotly-resampler: Not installed
2024-07-03 12:09:26,185:INFO:             kaleido: 0.2.1
2024-07-03 12:09:26,185:INFO:           schemdraw: 0.15
2024-07-03 12:09:26,185:INFO:         statsmodels: 0.14.2
2024-07-03 12:09:26,185:INFO:              sktime: 0.26.0
2024-07-03 12:09:26,185:INFO:               tbats: 1.1.3
2024-07-03 12:09:26,185:INFO:            pmdarima: 2.0.4
2024-07-03 12:09:26,185:INFO:              psutil: 6.0.0
2024-07-03 12:09:26,185:INFO:          markupsafe: 2.1.5
2024-07-03 12:09:26,185:INFO:             pickle5: Not installed
2024-07-03 12:09:26,185:INFO:         cloudpickle: 3.0.0
2024-07-03 12:09:26,185:INFO:         deprecation: 2.1.0
2024-07-03 12:09:26,185:INFO:              xxhash: 3.4.1
2024-07-03 12:09:26,185:INFO:           wurlitzer: Not installed
2024-07-03 12:09:26,185:INFO:PyCaret optional dependencies:
2024-07-03 12:09:26,251:INFO:                shap: Not installed
2024-07-03 12:09:26,252:INFO:           interpret: Not installed
2024-07-03 12:09:26,252:INFO:                umap: Not installed
2024-07-03 12:09:26,252:INFO:     ydata_profiling: Not installed
2024-07-03 12:09:26,252:INFO:  explainerdashboard: Not installed
2024-07-03 12:09:26,252:INFO:             autoviz: Not installed
2024-07-03 12:09:26,252:INFO:           fairlearn: Not installed
2024-07-03 12:09:26,252:INFO:          deepchecks: Not installed
2024-07-03 12:09:26,253:INFO:             xgboost: Not installed
2024-07-03 12:09:26,253:INFO:            catboost: Not installed
2024-07-03 12:09:26,253:INFO:              kmodes: Not installed
2024-07-03 12:09:26,253:INFO:             mlxtend: Not installed
2024-07-03 12:09:26,253:INFO:       statsforecast: Not installed
2024-07-03 12:09:26,253:INFO:        tune_sklearn: Not installed
2024-07-03 12:09:26,253:INFO:                 ray: Not installed
2024-07-03 12:09:26,253:INFO:            hyperopt: Not installed
2024-07-03 12:09:26,253:INFO:              optuna: Not installed
2024-07-03 12:09:26,253:INFO:               skopt: Not installed
2024-07-03 12:09:26,253:INFO:              mlflow: Not installed
2024-07-03 12:09:26,253:INFO:              gradio: Not installed
2024-07-03 12:09:26,253:INFO:             fastapi: Not installed
2024-07-03 12:09:26,253:INFO:             uvicorn: Not installed
2024-07-03 12:09:26,253:INFO:              m2cgen: Not installed
2024-07-03 12:09:26,253:INFO:           evidently: Not installed
2024-07-03 12:09:26,253:INFO:               fugue: Not installed
2024-07-03 12:09:26,253:INFO:           streamlit: 1.36.0
2024-07-03 12:09:26,253:INFO:             prophet: Not installed
2024-07-03 12:09:26,253:INFO:None
2024-07-03 12:09:26,253:INFO:Set up data.
2024-07-03 12:09:26,369:INFO:Set up folding strategy.
2024-07-03 12:09:26,369:INFO:Set up train/test split.
2024-07-03 12:09:26,817:INFO:Set up index.
2024-07-03 12:09:26,819:INFO:Assigning column types.
2024-07-03 12:09:26,828:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-07-03 12:09:27,294:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-03 12:09:27,354:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-03 12:09:27,677:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:27,677:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:28,124:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-07-03 12:09:28,124:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-03 12:09:28,352:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:28,352:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:28,367:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-07-03 12:09:28,852:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-03 12:09:29,149:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:29,149:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:29,508:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-07-03 12:09:29,727:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:29,727:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:29,727:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-07-03 12:09:30,399:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:30,402:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:31,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:31,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:31,332:INFO:Preparing preprocessing pipeline...
2024-07-03 12:09:31,426:INFO:Set up label encoding.
2024-07-03 12:09:31,426:INFO:Set up simple imputation.
2024-07-03 12:09:31,441:INFO:Set up column name cleaning.
2024-07-03 12:09:31,629:INFO:Finished creating preprocessing pipeline.
2024-07-03 12:09:31,673:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\Seyman\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2024-07-03 12:09:31,673:INFO:Creating final display dataframe.
2024-07-03 12:09:32,139:INFO:Setup _display_container:                     Description                    Value
0                    Session id                     8294
1                        Target              set[string]
2                   Target type                   Binary
3                Target mapping  Benign: 0, Malicious: 1
4           Original data shape                (9072, 6)
5        Transformed data shape                (9072, 6)
6   Transformed train set shape                (6350, 6)
7    Transformed test set shape                (2722, 6)
8              Numeric features                        5
9                    Preprocess                     True
10              Imputation type                   simple
11           Numeric imputation                     mean
12       Categorical imputation                     mode
13               Fold Generator          StratifiedKFold
14                  Fold Number                       10
15                     CPU Jobs                       -1
16                      Use GPU                    False
17               Log Experiment                    False
18              Experiment Name         clf-default-name
19                          USI                     2a89
2024-07-03 12:09:32,841:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:32,841:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:33,541:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:33,554:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-07-03 12:09:33,562:INFO:setup() successfully completed in 10.87s...............
2024-07-03 12:09:33,563:INFO:Initializing compare_models()
2024-07-03 12:09:33,563:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, include=None, exclude=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=2, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 2, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>})
2024-07-03 12:09:33,563:INFO:Checking exceptions
2024-07-03 12:09:33,589:INFO:Preparing display monitor
2024-07-03 12:09:33,738:INFO:Initializing Logistic Regression
2024-07-03 12:09:33,738:INFO:Total runtime is 0.0 minutes
2024-07-03 12:09:33,772:INFO:SubProcess create_model() called ==================================
2024-07-03 12:09:33,772:INFO:Initializing create_model()
2024-07-03 12:09:33,772:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:09:33,772:INFO:Checking exceptions
2024-07-03 12:09:33,772:INFO:Importing libraries
2024-07-03 12:09:33,772:INFO:Copying training dataset
2024-07-03 12:09:33,827:INFO:Defining folds
2024-07-03 12:09:33,828:INFO:Declaring metric variables
2024-07-03 12:09:33,854:INFO:Importing untrained model
2024-07-03 12:09:33,877:INFO:Logistic Regression Imported successfully
2024-07-03 12:09:33,912:INFO:Starting cross validation
2024-07-03 12:09:33,921:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:16,401:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,401:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,401:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,411:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,691:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,691:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,691:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,696:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,712:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,712:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,712:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:16,721:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,614:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,646:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,681:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,722:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,722:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,732:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,742:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,753:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,769:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,774:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,774:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:17,795:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,078:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,099:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,126:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,179:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,211:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,247:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:18,304:INFO:Calculating mean and std
2024-07-03 12:10:19,444:INFO:Creating metrics dataframe
2024-07-03 12:10:19,745:INFO:Uploading results into container
2024-07-03 12:10:19,745:INFO:Uploading model into container now
2024-07-03 12:10:19,745:INFO:_master_model_container: 1
2024-07-03 12:10:19,745:INFO:_display_container: 2
2024-07-03 12:10:19,745:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8294, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-07-03 12:10:19,760:INFO:create_model() successfully completed......................................
2024-07-03 12:10:20,408:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:20,408:INFO:Creating metrics dataframe
2024-07-03 12:10:20,445:INFO:Initializing K Neighbors Classifier
2024-07-03 12:10:20,446:INFO:Total runtime is 0.7784735560417175 minutes
2024-07-03 12:10:20,463:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:20,463:INFO:Initializing create_model()
2024-07-03 12:10:20,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:20,467:INFO:Checking exceptions
2024-07-03 12:10:20,468:INFO:Importing libraries
2024-07-03 12:10:20,468:INFO:Copying training dataset
2024-07-03 12:10:20,536:INFO:Defining folds
2024-07-03 12:10:20,536:INFO:Declaring metric variables
2024-07-03 12:10:20,563:INFO:Importing untrained model
2024-07-03 12:10:20,568:INFO:K Neighbors Classifier Imported successfully
2024-07-03 12:10:20,611:INFO:Starting cross validation
2024-07-03 12:10:20,616:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:23,963:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:23,963:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:23,963:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,001:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,006:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,014:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,014:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,032:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,033:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,040:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,041:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,056:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,485:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,485:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,514:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,523:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,534:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,539:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,547:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,563:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,584:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,597:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,616:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,657:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,935:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,936:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,951:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,951:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,977:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:24,977:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:25,189:INFO:Calculating mean and std
2024-07-03 12:10:25,194:INFO:Creating metrics dataframe
2024-07-03 12:10:25,211:INFO:Uploading results into container
2024-07-03 12:10:25,214:INFO:Uploading model into container now
2024-07-03 12:10:25,231:INFO:_master_model_container: 2
2024-07-03 12:10:25,231:INFO:_display_container: 2
2024-07-03 12:10:25,231:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-07-03 12:10:25,231:INFO:create_model() successfully completed......................................
2024-07-03 12:10:25,679:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:25,679:INFO:Creating metrics dataframe
2024-07-03 12:10:25,763:INFO:Initializing Naive Bayes
2024-07-03 12:10:25,763:INFO:Total runtime is 0.8670840303103129 minutes
2024-07-03 12:10:25,779:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:25,779:INFO:Initializing create_model()
2024-07-03 12:10:25,779:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:25,779:INFO:Checking exceptions
2024-07-03 12:10:25,779:INFO:Importing libraries
2024-07-03 12:10:25,796:INFO:Copying training dataset
2024-07-03 12:10:25,848:INFO:Defining folds
2024-07-03 12:10:25,849:INFO:Declaring metric variables
2024-07-03 12:10:25,874:INFO:Importing untrained model
2024-07-03 12:10:25,913:INFO:Naive Bayes Imported successfully
2024-07-03 12:10:25,966:INFO:Starting cross validation
2024-07-03 12:10:25,970:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:26,195:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,213:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,228:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,233:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,233:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,233:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,244:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,266:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,270:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,278:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,295:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,477:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,487:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,512:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,517:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,518:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,522:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,532:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,532:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,532:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,543:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,563:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,563:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,705:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,716:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,728:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,728:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,759:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,769:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:26,821:INFO:Calculating mean and std
2024-07-03 12:10:26,825:INFO:Creating metrics dataframe
2024-07-03 12:10:26,836:INFO:Uploading results into container
2024-07-03 12:10:26,836:INFO:Uploading model into container now
2024-07-03 12:10:26,848:INFO:_master_model_container: 3
2024-07-03 12:10:26,849:INFO:_display_container: 2
2024-07-03 12:10:26,851:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-07-03 12:10:26,853:INFO:create_model() successfully completed......................................
2024-07-03 12:10:27,694:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:27,694:INFO:Creating metrics dataframe
2024-07-03 12:10:27,724:INFO:Initializing Decision Tree Classifier
2024-07-03 12:10:27,724:INFO:Total runtime is 0.8997799197832743 minutes
2024-07-03 12:10:27,727:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:27,741:INFO:Initializing create_model()
2024-07-03 12:10:27,741:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:27,742:INFO:Checking exceptions
2024-07-03 12:10:27,742:INFO:Importing libraries
2024-07-03 12:10:27,742:INFO:Copying training dataset
2024-07-03 12:10:27,779:INFO:Defining folds
2024-07-03 12:10:27,783:INFO:Declaring metric variables
2024-07-03 12:10:27,814:INFO:Importing untrained model
2024-07-03 12:10:27,837:INFO:Decision Tree Classifier Imported successfully
2024-07-03 12:10:27,900:INFO:Starting cross validation
2024-07-03 12:10:27,901:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:28,359:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,378:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,393:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,399:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,399:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,411:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,426:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,430:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,430:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,430:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,451:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,461:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,648:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,669:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,673:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,692:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,692:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,692:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,692:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,716:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,719:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,719:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,745:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,748:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,875:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,896:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,902:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,910:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,920:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,941:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:28,973:INFO:Calculating mean and std
2024-07-03 12:10:28,975:INFO:Creating metrics dataframe
2024-07-03 12:10:28,975:INFO:Uploading results into container
2024-07-03 12:10:28,990:INFO:Uploading model into container now
2024-07-03 12:10:28,992:INFO:_master_model_container: 4
2024-07-03 12:10:28,992:INFO:_display_container: 2
2024-07-03 12:10:28,993:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best')
2024-07-03 12:10:28,994:INFO:create_model() successfully completed......................................
2024-07-03 12:10:29,475:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:29,475:INFO:Creating metrics dataframe
2024-07-03 12:10:29,500:INFO:Initializing SVM - Linear Kernel
2024-07-03 12:10:29,509:INFO:Total runtime is 0.9293725331624348 minutes
2024-07-03 12:10:29,525:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:29,525:INFO:Initializing create_model()
2024-07-03 12:10:29,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:29,525:INFO:Checking exceptions
2024-07-03 12:10:29,525:INFO:Importing libraries
2024-07-03 12:10:29,525:INFO:Copying training dataset
2024-07-03 12:10:29,597:INFO:Defining folds
2024-07-03 12:10:29,598:INFO:Declaring metric variables
2024-07-03 12:10:29,623:INFO:Importing untrained model
2024-07-03 12:10:29,656:INFO:SVM - Linear Kernel Imported successfully
2024-07-03 12:10:29,715:INFO:Starting cross validation
2024-07-03 12:10:29,715:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:30,399:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,400:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,429:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,429:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,429:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,460:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,461:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,474:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,474:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,499:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,500:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,533:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,923:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,943:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:30,957:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,016:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,047:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,078:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,111:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,142:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,142:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,152:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,226:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,258:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,604:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,605:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,622:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,643:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:31,674:INFO:Calculating mean and std
2024-07-03 12:10:31,674:INFO:Creating metrics dataframe
2024-07-03 12:10:31,693:INFO:Uploading results into container
2024-07-03 12:10:31,693:INFO:Uploading model into container now
2024-07-03 12:10:31,693:INFO:_master_model_container: 5
2024-07-03 12:10:31,693:INFO:_display_container: 2
2024-07-03 12:10:31,693:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8294, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-07-03 12:10:31,693:INFO:create_model() successfully completed......................................
2024-07-03 12:10:32,174:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:32,189:INFO:Creating metrics dataframe
2024-07-03 12:10:32,222:INFO:Initializing Ridge Classifier
2024-07-03 12:10:32,222:INFO:Total runtime is 0.9747338414192199 minutes
2024-07-03 12:10:32,238:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:32,238:INFO:Initializing create_model()
2024-07-03 12:10:32,238:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:32,238:INFO:Checking exceptions
2024-07-03 12:10:32,238:INFO:Importing libraries
2024-07-03 12:10:32,238:INFO:Copying training dataset
2024-07-03 12:10:32,295:INFO:Defining folds
2024-07-03 12:10:32,295:INFO:Declaring metric variables
2024-07-03 12:10:32,336:INFO:Importing untrained model
2024-07-03 12:10:32,356:INFO:Ridge Classifier Imported successfully
2024-07-03 12:10:32,414:INFO:Starting cross validation
2024-07-03 12:10:32,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:34,107:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,119:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,124:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,134:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,138:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,148:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,148:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,158:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,158:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,168:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,168:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,189:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,357:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,357:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,385:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,386:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,389:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,389:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,401:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,409:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,409:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,409:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,436:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,452:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,570:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,600:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,601:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,631:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,631:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,658:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:34,695:INFO:Calculating mean and std
2024-07-03 12:10:34,701:INFO:Creating metrics dataframe
2024-07-03 12:10:34,723:INFO:Uploading results into container
2024-07-03 12:10:34,729:INFO:Uploading model into container now
2024-07-03 12:10:34,732:INFO:_master_model_container: 6
2024-07-03 12:10:34,732:INFO:_display_container: 2
2024-07-03 12:10:34,737:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8294, solver='auto',
                tol=0.0001)
2024-07-03 12:10:34,738:INFO:create_model() successfully completed......................................
2024-07-03 12:10:35,235:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:35,235:INFO:Creating metrics dataframe
2024-07-03 12:10:35,283:INFO:Initializing Random Forest Classifier
2024-07-03 12:10:35,284:INFO:Total runtime is 1.0257697820663452 minutes
2024-07-03 12:10:35,301:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:35,302:INFO:Initializing create_model()
2024-07-03 12:10:35,302:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:35,302:INFO:Checking exceptions
2024-07-03 12:10:35,302:INFO:Importing libraries
2024-07-03 12:10:35,302:INFO:Copying training dataset
2024-07-03 12:10:35,388:INFO:Defining folds
2024-07-03 12:10:35,389:INFO:Declaring metric variables
2024-07-03 12:10:35,436:INFO:Importing untrained model
2024-07-03 12:10:35,449:INFO:Random Forest Classifier Imported successfully
2024-07-03 12:10:35,520:INFO:Starting cross validation
2024-07-03 12:10:35,525:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:39,969:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:39,969:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,007:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,053:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,058:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,064:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,095:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,095:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,142:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,153:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,185:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:40,217:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,538:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,614:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,623:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,659:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,668:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,688:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,889:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,929:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:43,950:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:44,030:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:44,053:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:44,119:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,774:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,800:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,828:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,911:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,932:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:45,960:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:46,000:INFO:Calculating mean and std
2024-07-03 12:10:46,009:INFO:Creating metrics dataframe
2024-07-03 12:10:46,016:INFO:Uploading results into container
2024-07-03 12:10:46,022:INFO:Uploading model into container now
2024-07-03 12:10:46,024:INFO:_master_model_container: 7
2024-07-03 12:10:46,025:INFO:_display_container: 2
2024-07-03 12:10:46,028:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False)
2024-07-03 12:10:46,029:INFO:create_model() successfully completed......................................
2024-07-03 12:10:46,506:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:46,506:INFO:Creating metrics dataframe
2024-07-03 12:10:46,565:INFO:Initializing Quadratic Discriminant Analysis
2024-07-03 12:10:46,565:INFO:Total runtime is 1.2137866775194803 minutes
2024-07-03 12:10:46,581:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:46,581:INFO:Initializing create_model()
2024-07-03 12:10:46,581:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:46,581:INFO:Checking exceptions
2024-07-03 12:10:46,581:INFO:Importing libraries
2024-07-03 12:10:46,581:INFO:Copying training dataset
2024-07-03 12:10:46,626:INFO:Defining folds
2024-07-03 12:10:46,627:INFO:Declaring metric variables
2024-07-03 12:10:46,657:INFO:Importing untrained model
2024-07-03 12:10:46,688:INFO:Quadratic Discriminant Analysis Imported successfully
2024-07-03 12:10:46,773:INFO:Starting cross validation
2024-07-03 12:10:46,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:47,807:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:47,807:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:47,830:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:47,830:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,846:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,862:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,871:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,871:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,878:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:47,894:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,898:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:47,898:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,293:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,293:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,300:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,300:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,309:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,309:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,309:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,325:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,338:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,346:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,346:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,353:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,353:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,362:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,474:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,494:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,502:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,505:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,505:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,505:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,505:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,526:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,540:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,540:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,544:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

t_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,563:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,563:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,567:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,567:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,567:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,567:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,579:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,579:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,587:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,587:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,598:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,598:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,608:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,611:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,611:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,611:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,618:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,626:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,628:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,628:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,642:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,700:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,726:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-07-03 12:10:48,726:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,726:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,726:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,742:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,742:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,742:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,751:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,754:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,755:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,755:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,763:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,763:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: divide by zero encountered in power
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,763:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:960: RuntimeWarning: invalid value encountered in multiply
  X2 = np.dot(Xm, R * (S ** (-0.5)))

2024-07-03 12:10:48,763:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\discriminant_analysis.py:963: RuntimeWarning: divide by zero encountered in log
  u = np.asarray([np.sum(np.log(s)) for s in self.scalings_])

2024-07-03 12:10:48,772:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py:204: FitFailedWarning: Metric 'make_scorer(roc_auc_score, response_method=('decision_function', 'predict_proba'), average=weighted, multi_class=ovr)' failed and error score 0.0 has been returned instead. If this is a custom metric, this usually means that the error is in the metric code. Full exception below:
Traceback (most recent call last):
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 196, in _score
    return super()._score(
           ^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_scorer.py", line 350, in _score
    return self._sign * self._score_func(y_true, y_pred, **scoring_kwargs)
                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 1049, in check_array
    _assert_all_finite(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 126, in _assert_all_finite
    _assert_all_finite_element_wise(
  File "c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\utils\validation.py", line 175, in _assert_all_finite_element_wise
    raise ValueError(msg_err)
ValueError: Input contains NaN.

  warnings.warn(

2024-07-03 12:10:48,782:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,782:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,803:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,803:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,811:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,813:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:10:48,827:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:48,864:INFO:Calculating mean and std
2024-07-03 12:10:48,864:INFO:Creating metrics dataframe
2024-07-03 12:10:48,889:INFO:Uploading results into container
2024-07-03 12:10:48,892:INFO:Uploading model into container now
2024-07-03 12:10:48,892:INFO:_master_model_container: 8
2024-07-03 12:10:48,892:INFO:_display_container: 2
2024-07-03 12:10:48,892:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-07-03 12:10:48,892:INFO:create_model() successfully completed......................................
2024-07-03 12:10:49,336:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:49,336:INFO:Creating metrics dataframe
2024-07-03 12:10:49,379:INFO:Initializing Ada Boost Classifier
2024-07-03 12:10:49,380:INFO:Total runtime is 1.2607066353162129 minutes
2024-07-03 12:10:49,392:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:49,393:INFO:Initializing create_model()
2024-07-03 12:10:49,393:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:49,394:INFO:Checking exceptions
2024-07-03 12:10:49,395:INFO:Importing libraries
2024-07-03 12:10:49,395:INFO:Copying training dataset
2024-07-03 12:10:49,427:INFO:Defining folds
2024-07-03 12:10:49,428:INFO:Declaring metric variables
2024-07-03 12:10:49,456:INFO:Importing untrained model
2024-07-03 12:10:49,488:INFO:Ada Boost Classifier Imported successfully
2024-07-03 12:10:49,534:INFO:Starting cross validation
2024-07-03 12:10:49,549:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:49,802:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:51,436:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,467:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,489:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,500:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,500:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,507:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,518:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,531:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,532:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,556:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,565:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:51,586:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:51,633:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:51,666:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:51,672:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:52,684:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,725:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,745:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,745:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,749:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,781:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,792:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,806:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,815:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,823:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,845:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:52,845:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,866:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:52,899:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-07-03 12:10:53,765:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,817:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,856:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,877:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,896:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,914:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:53,951:INFO:Calculating mean and std
2024-07-03 12:10:53,955:INFO:Creating metrics dataframe
2024-07-03 12:10:53,961:INFO:Uploading results into container
2024-07-03 12:10:53,963:INFO:Uploading model into container now
2024-07-03 12:10:53,964:INFO:_master_model_container: 9
2024-07-03 12:10:53,964:INFO:_display_container: 2
2024-07-03 12:10:53,965:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8294)
2024-07-03 12:10:53,965:INFO:create_model() successfully completed......................................
2024-07-03 12:10:54,470:INFO:SubProcess create_model() end ==================================
2024-07-03 12:10:54,471:INFO:Creating metrics dataframe
2024-07-03 12:10:54,520:INFO:Initializing Gradient Boosting Classifier
2024-07-03 12:10:54,521:INFO:Total runtime is 1.3463878432909646 minutes
2024-07-03 12:10:54,539:INFO:SubProcess create_model() called ==================================
2024-07-03 12:10:54,540:INFO:Initializing create_model()
2024-07-03 12:10:54,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:10:54,542:INFO:Checking exceptions
2024-07-03 12:10:54,543:INFO:Importing libraries
2024-07-03 12:10:54,543:INFO:Copying training dataset
2024-07-03 12:10:54,586:INFO:Defining folds
2024-07-03 12:10:54,587:INFO:Declaring metric variables
2024-07-03 12:10:54,606:INFO:Importing untrained model
2024-07-03 12:10:54,624:INFO:Gradient Boosting Classifier Imported successfully
2024-07-03 12:10:54,665:INFO:Starting cross validation
2024-07-03 12:10:54,669:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:10:58,383:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,399:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,415:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,415:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,431:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,449:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,453:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,469:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,484:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,484:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,500:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:10:58,500:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,894:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,917:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,931:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,947:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,952:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,963:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,980:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:00,980:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:01,015:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:01,018:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:01,047:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,024:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,053:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,055:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,065:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,075:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:03,118:INFO:Calculating mean and std
2024-07-03 12:11:03,118:INFO:Creating metrics dataframe
2024-07-03 12:11:03,149:INFO:Uploading results into container
2024-07-03 12:11:03,157:INFO:Uploading model into container now
2024-07-03 12:11:03,157:INFO:_master_model_container: 10
2024-07-03 12:11:03,157:INFO:_display_container: 2
2024-07-03 12:11:03,157:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8294, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-07-03 12:11:03,157:INFO:create_model() successfully completed......................................
2024-07-03 12:11:03,680:INFO:SubProcess create_model() end ==================================
2024-07-03 12:11:03,680:INFO:Creating metrics dataframe
2024-07-03 12:11:03,711:INFO:Initializing Linear Discriminant Analysis
2024-07-03 12:11:03,711:INFO:Total runtime is 1.4995629310607907 minutes
2024-07-03 12:11:03,743:INFO:SubProcess create_model() called ==================================
2024-07-03 12:11:03,743:INFO:Initializing create_model()
2024-07-03 12:11:03,743:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:03,743:INFO:Checking exceptions
2024-07-03 12:11:03,743:INFO:Importing libraries
2024-07-03 12:11:03,743:INFO:Copying training dataset
2024-07-03 12:11:03,811:INFO:Defining folds
2024-07-03 12:11:03,821:INFO:Declaring metric variables
2024-07-03 12:11:03,854:INFO:Importing untrained model
2024-07-03 12:11:03,885:INFO:Linear Discriminant Analysis Imported successfully
2024-07-03 12:11:03,941:INFO:Starting cross validation
2024-07-03 12:11:03,941:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:11:06,375:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,390:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,390:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,390:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,408:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,408:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,418:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,418:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,442:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,444:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,444:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,641:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,645:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,658:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,666:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,677:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,677:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,690:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,697:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,706:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,708:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,708:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,875:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,875:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,892:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,902:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,912:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,922:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:06,963:INFO:Calculating mean and std
2024-07-03 12:11:06,971:INFO:Creating metrics dataframe
2024-07-03 12:11:06,987:INFO:Uploading results into container
2024-07-03 12:11:06,987:INFO:Uploading model into container now
2024-07-03 12:11:06,987:INFO:_master_model_container: 11
2024-07-03 12:11:06,987:INFO:_display_container: 2
2024-07-03 12:11:06,987:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-07-03 12:11:06,987:INFO:create_model() successfully completed......................................
2024-07-03 12:11:07,438:INFO:SubProcess create_model() end ==================================
2024-07-03 12:11:07,438:INFO:Creating metrics dataframe
2024-07-03 12:11:07,485:INFO:Initializing Extra Trees Classifier
2024-07-03 12:11:07,485:INFO:Total runtime is 1.5624540845553077 minutes
2024-07-03 12:11:07,505:INFO:SubProcess create_model() called ==================================
2024-07-03 12:11:07,507:INFO:Initializing create_model()
2024-07-03 12:11:07,509:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:07,509:INFO:Checking exceptions
2024-07-03 12:11:07,509:INFO:Importing libraries
2024-07-03 12:11:07,509:INFO:Copying training dataset
2024-07-03 12:11:07,551:INFO:Defining folds
2024-07-03 12:11:07,552:INFO:Declaring metric variables
2024-07-03 12:11:07,589:INFO:Importing untrained model
2024-07-03 12:11:07,622:INFO:Extra Trees Classifier Imported successfully
2024-07-03 12:11:07,676:INFO:Starting cross validation
2024-07-03 12:11:07,676:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:11:10,667:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,680:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,698:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,718:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,728:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,729:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,749:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,749:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,764:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,767:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,780:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:10,813:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,681:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,692:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,727:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,727:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,797:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,813:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,821:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,860:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:12,912:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:13,478:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:13,502:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:13,614:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,377:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,377:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,411:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,429:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,429:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:14,475:INFO:Calculating mean and std
2024-07-03 12:11:14,475:INFO:Creating metrics dataframe
2024-07-03 12:11:14,475:INFO:Uploading results into container
2024-07-03 12:11:14,489:INFO:Uploading model into container now
2024-07-03 12:11:14,491:INFO:_master_model_container: 12
2024-07-03 12:11:14,491:INFO:_display_container: 2
2024-07-03 12:11:14,493:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8294, verbose=0,
                     warm_start=False)
2024-07-03 12:11:14,497:INFO:create_model() successfully completed......................................
2024-07-03 12:11:14,991:INFO:SubProcess create_model() end ==================================
2024-07-03 12:11:14,991:INFO:Creating metrics dataframe
2024-07-03 12:11:15,023:INFO:Initializing Light Gradient Boosting Machine
2024-07-03 12:11:15,023:INFO:Total runtime is 1.6880880196889239 minutes
2024-07-03 12:11:15,055:INFO:SubProcess create_model() called ==================================
2024-07-03 12:11:15,057:INFO:Initializing create_model()
2024-07-03 12:11:15,057:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:15,057:INFO:Checking exceptions
2024-07-03 12:11:15,057:INFO:Importing libraries
2024-07-03 12:11:15,057:INFO:Copying training dataset
2024-07-03 12:11:15,100:INFO:Defining folds
2024-07-03 12:11:15,101:INFO:Declaring metric variables
2024-07-03 12:11:15,125:INFO:Importing untrained model
2024-07-03 12:11:15,149:INFO:Light Gradient Boosting Machine Imported successfully
2024-07-03 12:11:15,220:INFO:Starting cross validation
2024-07-03 12:11:15,230:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:11:17,882:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,883:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,883:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,884:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,903:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,903:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,913:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,913:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,921:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,921:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,921:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:17,946:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:18,838:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:18,876:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:18,909:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:18,993:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,025:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,036:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,053:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,056:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,066:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,087:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,087:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,107:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,628:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,657:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,669:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,679:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,689:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,717:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:19,763:INFO:Calculating mean and std
2024-07-03 12:11:19,769:INFO:Creating metrics dataframe
2024-07-03 12:11:19,778:INFO:Uploading results into container
2024-07-03 12:11:19,803:INFO:Uploading model into container now
2024-07-03 12:11:19,803:INFO:_master_model_container: 13
2024-07-03 12:11:19,803:INFO:_display_container: 2
2024-07-03 12:11:19,803:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8294, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-07-03 12:11:19,803:INFO:create_model() successfully completed......................................
2024-07-03 12:11:20,251:INFO:SubProcess create_model() end ==================================
2024-07-03 12:11:20,549:INFO:Creating metrics dataframe
2024-07-03 12:11:20,583:INFO:Initializing Dummy Classifier
2024-07-03 12:11:20,583:INFO:Total runtime is 1.7807590405146279 minutes
2024-07-03 12:11:20,601:INFO:SubProcess create_model() called ==================================
2024-07-03 12:11:20,601:INFO:Initializing create_model()
2024-07-03 12:11:20,601:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFC8FD7990>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:20,601:INFO:Checking exceptions
2024-07-03 12:11:20,601:INFO:Importing libraries
2024-07-03 12:11:20,601:INFO:Copying training dataset
2024-07-03 12:11:20,643:INFO:Defining folds
2024-07-03 12:11:20,644:INFO:Declaring metric variables
2024-07-03 12:11:20,661:INFO:Importing untrained model
2024-07-03 12:11:20,708:INFO:Dummy Classifier Imported successfully
2024-07-03 12:11:20,785:INFO:Starting cross validation
2024-07-03 12:11:20,789:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-07-03 12:11:21,004:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,004:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,025:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,025:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,035:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,035:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,053:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,056:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,060:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,061:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,062:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,073:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,073:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,077:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,088:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,088:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,240:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,251:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,251:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,265:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,271:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,271:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,271:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,289:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,292:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,292:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,302:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,302:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,302:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,302:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,312:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,312:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,460:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,484:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,491:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,502:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,506:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-07-03 12:11:21,512:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,517:WARNING:c:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\venv\Lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Malicious') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-07-03 12:11:21,554:INFO:Calculating mean and std
2024-07-03 12:11:21,554:INFO:Creating metrics dataframe
2024-07-03 12:11:21,554:INFO:Uploading results into container
2024-07-03 12:11:21,575:INFO:Uploading model into container now
2024-07-03 12:11:21,578:INFO:_master_model_container: 14
2024-07-03 12:11:21,579:INFO:_display_container: 2
2024-07-03 12:11:21,580:INFO:DummyClassifier(constant=None, random_state=8294, strategy='prior')
2024-07-03 12:11:21,582:INFO:create_model() successfully completed......................................
2024-07-03 12:11:22,051:INFO:SubProcess create_model() end ==================================
2024-07-03 12:11:22,051:INFO:Creating metrics dataframe
2024-07-03 12:11:22,151:INFO:Initializing create_model()
2024-07-03 12:11:22,152:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best'), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:22,152:INFO:Checking exceptions
2024-07-03 12:11:22,160:INFO:Importing libraries
2024-07-03 12:11:22,160:INFO:Copying training dataset
2024-07-03 12:11:22,189:INFO:Defining folds
2024-07-03 12:11:22,190:INFO:Declaring metric variables
2024-07-03 12:11:22,191:INFO:Importing untrained model
2024-07-03 12:11:22,192:INFO:Declaring custom model
2024-07-03 12:11:22,196:INFO:Decision Tree Classifier Imported successfully
2024-07-03 12:11:22,203:INFO:Cross validation set to False
2024-07-03 12:11:22,203:INFO:Fitting Model
2024-07-03 12:11:22,334:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best')
2024-07-03 12:11:22,334:INFO:create_model() successfully completed......................................
2024-07-03 12:11:22,834:INFO:Initializing create_model()
2024-07-03 12:11:24,319:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:24,319:INFO:Checking exceptions
2024-07-03 12:11:24,321:INFO:Importing libraries
2024-07-03 12:11:24,321:INFO:Copying training dataset
2024-07-03 12:11:24,345:INFO:Defining folds
2024-07-03 12:11:24,345:INFO:Declaring metric variables
2024-07-03 12:11:24,346:INFO:Importing untrained model
2024-07-03 12:11:24,346:INFO:Declaring custom model
2024-07-03 12:11:24,347:INFO:Random Forest Classifier Imported successfully
2024-07-03 12:11:24,347:INFO:Cross validation set to False
2024-07-03 12:11:24,347:INFO:Fitting Model
2024-07-03 12:11:25,914:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False)
2024-07-03 12:11:25,914:INFO:create_model() successfully completed......................................
2024-07-03 12:11:26,609:INFO:_master_model_container: 14
2024-07-03 12:11:26,609:INFO:_display_container: 2
2024-07-03 12:11:26,635:INFO:[DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best'), RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False)]
2024-07-03 12:11:26,636:INFO:compare_models() successfully completed......................................
2024-07-03 12:11:26,638:INFO:Initializing finalize_model()
2024-07-03 12:11:26,638:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best'), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-07-03 12:11:26,639:INFO:Finalizing DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best')
2024-07-03 12:11:26,662:INFO:Initializing create_model()
2024-07-03 12:11:26,662:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8294, splitter='best'), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:26,662:INFO:Checking exceptions
2024-07-03 12:11:26,670:INFO:Importing libraries
2024-07-03 12:11:26,670:INFO:Copying training dataset
2024-07-03 12:11:26,673:INFO:Defining folds
2024-07-03 12:11:26,674:INFO:Declaring metric variables
2024-07-03 12:11:26,674:INFO:Importing untrained model
2024-07-03 12:11:26,675:INFO:Declaring custom model
2024-07-03 12:11:26,679:INFO:Decision Tree Classifier Imported successfully
2024-07-03 12:11:26,682:INFO:Cross validation set to False
2024-07-03 12:11:26,682:INFO:Fitting Model
2024-07-03 12:11:26,815:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False)
2024-07-03 12:11:26,815:INFO:create_model() successfully completed......................................
2024-07-03 12:11:27,250:INFO:_master_model_container: 14
2024-07-03 12:11:27,250:INFO:_display_container: 2
2024-07-03 12:11:27,266:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False)
2024-07-03 12:11:27,266:INFO:finalize_model() successfully completed......................................
2024-07-03 12:11:27,751:INFO:Initializing predict_model()
2024-07-03 12:11:27,751:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FFC11DFF60>)
2024-07-03 12:11:27,751:INFO:Checking exceptions
2024-07-03 12:11:27,751:INFO:Preloading libraries
2024-07-03 12:11:29,795:INFO:Initializing finalize_model()
2024-07-03 12:11:29,795:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2024-07-03 12:11:29,797:INFO:Finalizing RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False)
2024-07-03 12:11:29,808:INFO:Initializing create_model()
2024-07-03 12:11:29,808:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8294, verbose=0,
                       warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2024-07-03 12:11:29,808:INFO:Checking exceptions
2024-07-03 12:11:29,808:INFO:Importing libraries
2024-07-03 12:11:29,808:INFO:Copying training dataset
2024-07-03 12:11:29,824:INFO:Defining folds
2024-07-03 12:11:29,824:INFO:Declaring metric variables
2024-07-03 12:11:29,825:INFO:Importing untrained model
2024-07-03 12:11:29,826:INFO:Declaring custom model
2024-07-03 12:11:29,828:INFO:Random Forest Classifier Imported successfully
2024-07-03 12:11:29,831:INFO:Cross validation set to False
2024-07-03 12:11:29,831:INFO:Fitting Model
2024-07-03 12:11:31,446:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8294, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-03 12:11:31,446:INFO:create_model() successfully completed......................................
2024-07-03 12:11:31,839:INFO:_master_model_container: 14
2024-07-03 12:11:31,839:INFO:_display_container: 3
2024-07-03 12:11:31,862:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8294, verbose=0,
                                        warm_start=False))],
         verbose=False)
2024-07-03 12:11:31,862:INFO:finalize_model() successfully completed......................................
2024-07-03 12:11:32,304:INFO:Initializing predict_model()
2024-07-03 12:11:32,304:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8294, verbose=0,
                                        warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FFBE1F9A80>)
2024-07-03 12:11:32,304:INFO:Checking exceptions
2024-07-03 12:11:32,304:INFO:Preloading libraries
2024-07-03 12:11:33,767:INFO:Initializing plot_model()
2024-07-03 12:11:33,767:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False), plot=boundary, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-03 12:11:33,767:INFO:Checking exceptions
2024-07-03 12:11:33,846:INFO:Preloading libraries
2024-07-03 12:11:33,869:INFO:Copying training dataset
2024-07-03 12:11:33,869:INFO:Plot type: boundary
2024-07-03 12:11:34,194:INFO:Fitting StandardScaler()
2024-07-03 12:11:34,210:INFO:Fitting PCA()
2024-07-03 12:11:34,632:INFO:Fitting Model
2024-07-03 12:11:42,782:INFO:Visual Rendered Successfully
2024-07-03 12:11:43,329:INFO:plot_model() successfully completed......................................
2024-07-03 12:11:43,360:INFO:Initializing plot_model()
2024-07-03 12:11:43,360:INFO:plot_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                 RandomForestClassifier(bootstrap=True, ccp_alpha=0.0,
                                        class_weight=None, criterion='gini',
                                        max_depth=None, max_features='sqrt',
                                        max_leaf_nodes=None, max_samples=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, n_estimators=100,
                                        n_jobs=-1, oob_score=False,
                                        random_state=8294, verbose=0,
                                        warm_start=False))],
         verbose=False), plot=boundary, scale=1, save=False, fold=None, fit_kwargs=None, plot_kwargs=None, groups=None, feature_name=None, label=False, verbose=True, system=True, display=None, display_format=None)
2024-07-03 12:11:43,360:INFO:Checking exceptions
2024-07-03 12:11:43,478:INFO:Preloading libraries
2024-07-03 12:11:43,590:INFO:Copying training dataset
2024-07-03 12:11:43,590:INFO:Plot type: boundary
2024-07-03 12:11:43,728:INFO:Fitting StandardScaler()
2024-07-03 12:11:43,744:INFO:Fitting PCA()
2024-07-03 12:11:43,892:INFO:Fitting Model
2024-07-03 12:11:49,815:INFO:Visual Rendered Successfully
2024-07-03 12:11:50,925:INFO:plot_model() successfully completed......................................
2024-07-03 12:11:52,604:INFO:Initializing save_model()
2024-07-03 12:11:52,604:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False), model_name=next_best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\Seyman\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy...
                ('categorical_imputer',
                 TransformerWrapper(exclude=None, include=[],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-07-03 12:11:52,604:INFO:Adding model into prep_pipe
2024-07-03 12:11:52,616:WARNING:Only Model saved as it was a pipeline.
2024-07-03 12:11:52,654:INFO:next_best_model.pkl saved in current working directory
2024-07-03 12:11:52,687:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False)
2024-07-03 12:11:52,688:INFO:save_model() successfully completed......................................
2024-07-03 12:11:53,620:INFO:Initializing load_model()
2024-07-03 12:11:53,620:INFO:load_model(model_name=next_best_model, platform=None, authentication=None, verbose=True)
2024-07-03 12:11:53,807:INFO:Initializing predict_model()
2024-07-03 12:11:53,807:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFC8A99690>, estimator=Pipeline(memory=FastMemory(location=C:\Users\Seyman\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['src_ip', 'dst_ip', 'proto',
                                             'src_port', 'dst_port'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy...
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('actual_estimator',
                 DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None,
                                        criterion='gini', max_depth=None,
                                        max_features=None, max_leaf_nodes=None,
                                        min_impurity_decrease=0.0,
                                        min_samples_leaf=1, min_samples_split=2,
                                        min_weight_fraction_leaf=0.0,
                                        monotonic_cst=None, random_state=8294,
                                        splitter='best'))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FFC9263880>)
2024-07-03 12:11:53,814:INFO:Checking exceptions
2024-07-03 12:11:53,814:INFO:Preloading libraries
2024-07-05 06:46:15,948:WARNING:C:\Users\Seyman\Desktop\ola's gigs\Threat_detection_in_cloud\main.py:52: FutureWarning: 

Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.

  sns.countplot(x='predictions', data=df, palette='viridis')

